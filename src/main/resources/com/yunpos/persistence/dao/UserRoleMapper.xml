<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yunpos.persistence.dao.UserRoleMapper">
	<resultMap id="BaseResultMap" type="com.yunpos.model.UserRole">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="userId" property="userId" jdbcType="INTEGER" />
		<result column="roleId" property="roleId" jdbcType="INTEGER" />
		<result column="createUserId" property="createUserId" jdbcType="INTEGER" />
		<result column="createDate" property="createDate" jdbcType="TIMESTAMP" />
		<result column="modifyUserId" property="modifyUserId" jdbcType="INTEGER" />
		<result column="modifyDate" property="modifyDate" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Base_Column_List">
		id, userId, roleId, createUserId, createDate, modifyUserId, modifyDate
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from user_role
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user_role
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.yunpos.model.UserRole">
		insert into user_role (id, userId, roleId,
		createUserId, createDate, modifyUserId,
		modifyDate)
		values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{roleId,jdbcType=INTEGER},
		#{createUserId,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{modifyUserId,jdbcType=INTEGER},
		#{modifyDate,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="com.yunpos.model.UserRole">
		insert into user_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userId != null">
				userId,
			</if>
			<if test="roleId != null">
				roleId,
			</if>
			<if test="createUserId != null">
				createUserId,
			</if>
			<if test="createDate != null">
				createDate,
			</if>
			<if test="modifyUserId != null">
				modifyUserId,
			</if>
			<if test="modifyDate != null">
				modifyDate,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="roleId != null">
				#{roleId,jdbcType=INTEGER},
			</if>
			<if test="createUserId != null">
				#{createUserId,jdbcType=INTEGER},
			</if>
			<if test="createDate != null">
				#{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifyUserId != null">
				#{modifyUserId,jdbcType=INTEGER},
			</if>
			<if test="modifyDate != null">
				#{modifyDate,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.yunpos.model.UserRole">
		update user_role
		<set>
			<if test="userId != null">
				userId = #{userId,jdbcType=INTEGER},
			</if>
			<if test="roleId != null">
				roleId = #{roleId,jdbcType=INTEGER},
			</if>
			<if test="createUserId != null">
				createUserId = #{createUserId,jdbcType=INTEGER},
			</if>
			<if test="createDate != null">
				createDate = #{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifyUserId != null">
				modifyUserId = #{modifyUserId,jdbcType=INTEGER},
			</if>
			<if test="modifyDate != null">
				modifyDate = #{modifyDate,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.yunpos.model.UserRole">
		update user_role
		set userId = #{userId,jdbcType=INTEGER},
		roleId = #{roleId,jdbcType=INTEGER},
		createUserId = #{createUserId,jdbcType=INTEGER},
		createDate = #{createDate,jdbcType=TIMESTAMP},
		modifyUserId = #{modifyUserId,jdbcType=INTEGER},
		modifyDate = #{modifyDate,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- ##################################### -->
	<delete id="batchDeleteByIds">
		delete from user_role where id in
		<foreach item="item" index="index" collection="array" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</delete>
</mapper>